#!/usr/bin/env python
""" commandline tool to parse an article at a given url """

import urllib2
import logging
from optparse import OptionParser
import re
import csv
import sys
import socket
from metareadability.test.urllib2helpers import CacheHandler
from metareadability.article import Article

def main():
    parser = OptionParser(usage="%prog: [options]")
    parser.add_option('-v', '--verbose', action='store_true')
    parser.add_option('-d', '--debug', action='store_true')
    parser.add_option('-c', '--cache', action='store_true', help="cache downloaded files in .cache dir")
    parser.add_option('-s', '--short', action='store_true', help="short output (no text content, just metadata in csv format)")
    (options, args) = parser.parse_args()

    log_level = logging.ERROR
    if options.debug:
        log_level = logging.DEBUG
    elif options.verbose:
        log_level = logging.INFO

#    logging.basicConfig(level=log_level, format='%(message)s')
    x = logging.getLogger("metareadability")
    x.setLevel(log_level)

    if options.cache:
        logging.info("Using .cache")
        opener = urllib2.build_opener(CacheHandler('.cache'))
    else:
        opener = urllib2.build_opener()
    urllib2.install_opener(opener)
    socket.setdefaulttimeout(5)

    if options.short:
        w = csv.writer(sys.stdout)

    for url in args:
        resp = urllib2.urlopen(url)
        html = resp.read()
        kwargs = {}
        content_type = resp.info().getheader('Content-Type','')
        m = re.compile(r';\s*charset\s*=\s*([^;]*)', re.I).search(content_type)
        if m:
            kwargs['encoding'] = m.group(1)

        art = Article(html,url,**kwargs)

        headline = art.headline
        byline = art.authors
        pubdate = art.pubdate
        content = art.content

        if options.short:        
            row = [url,headline,byline,unicode(pubdate.date())]
            row = [f.encode('utf-8') if f is not None else u'' for f in row]
            w.writerow(row)
        else:
            print("---")
            print("url: %s" % (url,))
            print("title: %s" % (headline.encode('utf-8'),))
            print("byline: %s" % (byline.encode('utf-8'),))
            print("pubdate: %s" % (pubdate,))
            print("---")
            print(content.encode('utf-8'))



if __name__ == '__main__':
    main()

